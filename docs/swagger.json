{
    "swagger": "2.0",
    "info": {
        "description": "This repository is an example of an API made in Go with the To Do List theme.",
        "title": "To Do List API",
        "contact": {
            "name": "Lucas Santos",
            "url": "https://github.com/devlucassantos"
        },
        "license": {
            "name": "MIT"
        },
        "version": "1.0.0"
    },
    "host": "localhost:8000",
    "basePath": "/api",
    "paths": {
        "/auth/signin": {
            "post": {
                "description": "Route that allows connecting the user to the system through their registration data. To connect a user it is necessary to inform the following data in the body of the request:\n|   Name   |  Type  |   Required  | Description\t\t|\n|----------|--------|-------------|-----------------|\n| email    | string |      x      | User email      |\n| password | string |      x      | User password   |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Sign In",
                "operationId": "SignIn",
                "parameters": [
                    {
                        "description": "JSON responsible for sending all user sign in data to the server",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerSignInRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully signed in",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerAuthResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to access this account",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/signup": {
            "post": {
                "description": "Route that allows you to register a user in the system. To register a user it is necessary to inform the following data in the body of the request:\n|   Name   |  Type  |   Required  | Description\t\t|\n|----------|--------|-------------|-----------------|\n| name     | string |      x      | Real user name  |\n| email    | string |      x      | User email      |\n| password | string |      x      | User password   |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Sign Up",
                "operationId": "SignUp",
                "parameters": [
                    {
                        "description": "JSON responsible for sending all user registration data to the server",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerSignUpRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerAuthResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "409": {
                        "description": "The user tried to register with the email of an existing user",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerConflictErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}/collection": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows searching all user collections in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "summary": "Lists all user collections",
                "operationId": "FindAllCollections",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.SwaggerCollectionResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows registering a collection in the system. To register a collection it is necessary to inform the following data in the body of the request:\n|   Name   |  Type  |   Required  | Description      |\n|----------|--------|-------------|------------------|\n|   name   | string |      x      | Collection name |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "summary": "Create a collection",
                "operationId": "CreateCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON responsible for sending all collection registration data to the database",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Collection successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerIdResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}/collection/{collectionId}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows searching a collection registered in the system by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "summary": "Search a collection's data by ID",
                "operationId": "FindByCollectionId",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerCollectionResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows editing a collection in the system. To edit a collection it is necessary to inform the following data:\n|   Name   |  Type  |   Required  | Description\t     |\n|----------|--------|-------------|------------------|\n|   name   | string |      x      | Collection name  |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "summary": "Update a collection",
                "operationId": "UpdateCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON responsible for sending the data needed to update the collection in the database",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Collection successfully edited"
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows deleting a collection registered in the system",
                "tags": [
                    "Collection"
                ],
                "summary": "Delete a collection",
                "operationId": "DeleteCollection",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Collection successfully deleted"
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}/collection/{collectionId}/tasks": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows searching all tasks registered in the system by collection ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Collection"
                ],
                "summary": "Search all tasks by collection ID",
                "operationId": "FindTasksByCollectionId",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Collection ID",
                        "name": "collectionId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerTaskResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}/task": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows searching all user tasks in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Lists all user tasks",
                "operationId": "FindAllTasks",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/response.SwaggerTaskResponse"
                            }
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows registering a task in the system. To register a task it is necessary to inform the following data in the body of the request:\n|      Name     |  Type  |   Required  |                    Description                    |\n|---------------|--------|-------------|---------------------------------------------------|\n| description   | string |             | Task description                                  |\n| finished      |  bool  |             | If the task has been completed                    |\n| collection_id |  int   |             | ID of the collection to which the task is related |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Create a task",
                "operationId": "CreateTask",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON responsible for sending all task registration data to the database",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Task successfully registered",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerIdResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/{userId}/task/{taskId}": {
            "get": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows searching a task registered in the system by ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Search a task's data by ID",
                "operationId": "FindByTaskId",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerTaskResponse"
                        }
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows editing a task in the system. To edit a task it is necessary to inform the following data:\n|      Name     |  Type  |   Required  |                    Description                    |\n|---------------|--------|-------------|---------------------------------------------------|\n| description   | string |             | Task description                                  |\n| finished      |  bool  |             | If the task has been completed                    |\n| collection_id |  int   |             | ID of the collection to which the task is related |",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Task"
                ],
                "summary": "Update a task",
                "operationId": "UpdateTask",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "JSON responsible for sending the data needed to update the task in the database",
                        "name": "authJson",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.SwaggerTaskRequest"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task successfully edited"
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "bearerAuth": []
                    }
                ],
                "description": "Route that allows deleting a task registered in the system",
                "tags": [
                    "Task"
                ],
                "summary": "Delete a task",
                "operationId": "DeleteTask",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "User ID",
                        "name": "userId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 1,
                        "description": "Task ID",
                        "name": "taskId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Task successfully deleted"
                    },
                    "400": {
                        "description": "The user has made a bad request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "401": {
                        "description": "The user is not authorized to make this request",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerUnauthorizedResponse"
                        }
                    },
                    "403": {
                        "description": "The user does not have access to this information",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerForbiddenResponse"
                        }
                    },
                    "404": {
                        "description": "The user has requested a non-existent resource",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerNotFoundErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Some entered data could not be processed because it is not valid",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerValidationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "An unexpected server error has occurred",
                        "schema": {
                            "$ref": "#/definitions/response.SwaggerGenericErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.SwaggerCollectionRequest": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "example": "Collection example"
                }
            }
        },
        "request.SwaggerSignInRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "ex@mplePassw0rd"
                }
            }
        },
        "request.SwaggerSignUpRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "name": {
                    "type": "string",
                    "example": "Example Name"
                },
                "password": {
                    "type": "string",
                    "example": "ex@mplePassw0rd"
                }
            }
        },
        "request.SwaggerTaskRequest": {
            "type": "object",
            "properties": {
                "collection_id": {
                    "type": "integer",
                    "example": 1
                },
                "description": {
                    "type": "string",
                    "example": "Task example"
                },
                "finished": {
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "response.SwaggerAuthResponse": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6Ikp..."
                },
                "email": {
                    "type": "string",
                    "example": "example@example.com"
                },
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Example Name"
                }
            }
        },
        "response.SwaggerCollectionResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                },
                "name": {
                    "type": "string",
                    "example": "Collection example"
                }
            }
        },
        "response.SwaggerConflictErrorResponse": {
            "type": "object",
            "properties": {
                "conflicts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "Field example"
                    ]
                },
                "error_msg": {
                    "type": "string",
                    "example": "It is not possible to perform the operation because there are conflicting and/or duplicate data."
                }
            }
        },
        "response.SwaggerForbiddenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Oops! You do not have access to this information."
                }
            }
        },
        "response.SwaggerGenericErrorResponse": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string",
                    "example": "Oops! An unexpected error has occurred."
                }
            }
        },
        "response.SwaggerIdResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "response.SwaggerInvalidField": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Description example"
                },
                "name": {
                    "type": "string",
                    "example": "Field example"
                }
            }
        },
        "response.SwaggerNotFoundErrorResponse": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string",
                    "example": "Not Found"
                }
            }
        },
        "response.SwaggerTaskResponse": {
            "type": "object",
            "properties": {
                "collection": {
                    "$ref": "#/definitions/response.SwaggerCollectionResponse"
                },
                "description": {
                    "type": "string",
                    "example": "Description example"
                },
                "finished": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "response.SwaggerUnauthorizedResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Oops! You are not authorized."
                }
            }
        },
        "response.SwaggerValidationErrorResponse": {
            "type": "object",
            "properties": {
                "error_msg": {
                    "type": "string",
                    "example": "Some of the data entered is invalid."
                },
                "invalid_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/response.SwaggerInvalidField"
                    }
                }
            }
        }
    },
    "securityDefinitions": {
        "bearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}